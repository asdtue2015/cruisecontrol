// Actually PI controller only
// Kpc: Master set value (critical P gain)
import "ccs.cif";

automaton def pid(alg real Kpc; alg real ARW_limit):

    // Ziegler-Nichols values       // FIXME 26km/h in 4 s  - no pure delay -> calculate ZN
    alg real Kp = 0.6 * Kpc;
    alg real Ki = 0.5 * Kpc;
    alg real Kd = 0.125 * Kpc;

    cont PID_Integrator = 0.0;
    alg real reaction;
    cont t = 0.0;
    equation t'=1;

    alg bool CSS_state = css.state;
    alg real V_Target = ccs.ts;
    input real V_Measure;


    alg real error = V_Target - V_Measure;

    equation PID_Integrator' = error;

    alg real integral = Ki * PID_Integrator;
    alg real proportional = Kp * PID_Integrator';

    alg real output = if reaction <= 1 : (if reaction >= 0 : reaction else 0 end) else 1 end; // Constrain to [0;1]

    location idle:
        initial;
        equation reaction = 0;

        edge when CCS_state do PID_Integrator := 0.0, t:=0 goto big_error; // CCS is turned on -> enable PID output and assume error is big

    // Locations are implementations of Anti Reset Windup: switch Integrator only when close to the target
    location big_error:
       equation reaction = proportional;

       edge when CCS_state = false goto idle;   // CCS is turned off -> disable PID output
       edge when error < ARW_limit, t>0.1 do PID_Integrator := 0.0, t:=0 goto small_error;
       edge when error > -ARW_limit, t>0.1 do PID_Integrator := 0.0, t:=0 goto small_error;

    location small_error:
       equation reaction = integral + proportional;

       edge when CCS_state = false goto idle;   // CCS is turned off -> disable PID output
       edge when error > ARW_limit, t>0.1 do PID_Integrator := 0.0, t:=0 goto big_error;
       edge when error < -ARW_limit, t>0.1 do PID_Integrator := 0.0, t:=0 goto big_error;


end
